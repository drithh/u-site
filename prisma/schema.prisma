// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  address       String?

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?              @unique

  accounts Account[]
  sessions Session[]
  reviews  Review[]
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String  @db.VarChar(1000)

  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
  @@index([organizationId])
}

model Organization {
  id            String @id @default(cuid())
  name          String 
  description   String  @db.VarChar(1000)
  field         String
  established   DateTime?
  image         String?
  vision        String?
  mission       String?
  
  user          User?
  reviews       Review[]
  members       Member[]
  workPrograms     WorkProgram[]
  achievements  Achievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@fulltext([name])
}

model Achievement {
    id              String @id @default(cuid())

    organization    Organization @relation(fields: [organizationId], references: [id])
    organizationId  String

    title           String
    date            DateTime

    @@index([organizationId])
}

model Member {
    id              String @id @default(cuid())

    organization    Organization @relation(fields: [organizationId], references: [id])
    organizationId  String

    name            String
    studentId       String
    email           String
    position        String

    @@index([organizationId])
}

model WorkProgram {
    id              String @id @default(cuid())

    organization    Organization @relation(fields: [organizationId], references: [id])
    organizationId  String

    title           String
    date            DateTime
    status          String

    @@index([organizationId])
}   

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



